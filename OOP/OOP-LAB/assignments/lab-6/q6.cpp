/*

? |
You've been hired by a fictional tech company that believes "more features = better product", and
your job is to design the ultimate multi-purpose gadget. You start with a base class called Device,
because every overpriced gadgetâ€”whether it's a smartphone, tablet, or toaster that plays Spotifyâ€”
needs a brand and model. So far, so good. Then, the marketing team gets involved. They demand
a Smartphone class that adds a SIM slot count (because dual SIM = instant genius) and a Tablet
class that adds stylus support (so people can pretend they're productive). Both of these classes
inherit from Device, because duh, they're devices. But hold onâ€”things are about to go off the rails.
The CEO, in a caffeine-fueled eureka moment, demands a HybridDeviceâ€”a device that's both a
Smartphone and a Tablet. You sigh, create a HybridDevice class that inherits from both
Smartphone and Tablet, and BAMâ€”welcome to the Diamond ProblemTM! ðŸš¨ Your HybridDevice

now has two separate copies of the Device class, and your compiler is looking at you like, "What
have you done?" ðŸ˜¡ðŸ’¥ Now, your mission (if you choose to accept it): fix this disaster using
virtual inheritance, so your HybridDevice doesn't cause a compiler meltdown. Finally,
demonstrate how to create and use a HybridDevice object without the program catching
fire.

* Name:         Rafay Siddiqui
* roll number:  24k-0009
* section:      BAI-2A


*/

#include <iostream>

using namespace std;





int main(){




    return 0;
}